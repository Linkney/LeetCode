"""
一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。
我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；
其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）
为了尽快到达公主，骑士决定每次只向右或向下移动一步。

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。
-2 (K)	-3	3
-5	-10	1
10	30	-5 (P)
"""


# def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:
class Solution:
    def calculateMinimumHP(self, dungeon):
        # dp[i][j] 表示      从坐标 (i,j) 到终点      所需的最小初始值 ！！！！         dp[0][0] 即 答案
        # 当我们到达坐标 (i,j) 时，  如果 我们 一路上吃的能量和 大于等于 dp[i][j]     我们就能到达终点。
        # dp[i][j] = max( ( min( dp[i+1][j], dp[i][j+1] ) − dungeon(i,j) ) , 1 )
        # 约束1：一路上吃的能量最小值为 1 （不能有个时刻能量为 负）
        # 身上的能量 >= 从当前位置出发能走到终点的能量要求（ >=1 ）

        n, m = len(dungeon), len(dungeon[0])

        BIG = 10 ** 9
        # 懒惰答案矩阵构造（肥右下一圈）
        dp = [[BIG] * (m + 1) for _ in range(n + 1)]

        # 初始答案构造 为了得到 原迷宫右下角格子 信息
        dp[n][m - 1] = dp[n - 1][m] = 1

        for i in range(n - 1, -1, -1):
            # 逆序遍历
            for j in range(m - 1, -1, -1):
                # 逆序遍历
                minn = min(dp[i + 1][j], dp[i][j + 1])
                dp[i][j] = max(minn - dungeon[i][j], 1)

        return dp[0][0]
