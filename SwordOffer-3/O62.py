"""
0,1,,n-1这n个数字排成一个圆圈
从数字0开始，每次从这个圆圈里删除第m个数字，求出这个圆圈里剩下的最后一个数字
例如，0、1、2、3、4 这5个数字组成一个圆圈，从数字0开始每次删除第3个数字
则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3

示例 1：
输入: n = 5, m = 3
输出: 3

示例 2：
输入: n = 10, m = 17
输出: 2
"""


# 约瑟夫环
#       数学解法
#           最后的情景   ans
#               已知信息 最后剩 ans 且处在第一个位置   m已知 n已知  可以倒推上一轮 ans 所处的位置  不断倒推至初始
#               (此轮过后的num下标 + m) % 上轮元素个数 = 上轮num的下标
#
#       F（n, m） = 表示最后剩下那个人的索引号
#       F（n, m） = 0         n = 1 时
#       F（n, m） = [ F（n-1, m） + m ] % n     n > 1 时
#               将 killed 补在队伍最后 然后将队伍后部的 m 个移动到队伍前 （%n） 即得到上一轮序列
class Solution:
    def lastRemaining(self, n: int, m: int) -> int:
        ans = 0
        for i in range(2, n+1):
            ans = (ans + m) % i
        return ans
