"""
请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数
例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2

示例 1：
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：
输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：
输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
"""


class Solution:
    def hammingWeight(self, n: int) -> int:
        ans = 0
        # 只要 n 不为 0 即 二进制表示里还有 1 就得 与+右移 来增加答案
        while n:
            # print("n:", n)
            # 和 1 与     n (本质上在计算机里也是二进制表示)   &  0000000000001  =   0000000000001 or 0000000000000
            # 右移一位    相当于 除以二 取整
            ans += n & 1
            # print("res:", ans)
            n >>= 1
            # n = n>>1   上式代码展开
        return ans


if __name__ == '__main__':
    print(Solution().hammingWeight(11))

# 二进制 n & (n−1)
#         res = 0
#         while n:
#             res += 1
#             n &= n - 1
#         return res
